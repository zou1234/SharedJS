(window.webpackJsonp=window.webpackJsonp||[]).push([[6,4,5],{390:function(n,l,t){"use strict";t.d(l,"a",(function(){return r}));t(31),t(234),t(39),t(20);function r(n){var l=window.location.href;return!!new RegExp(".*\\b"+n+"\\b(\\s*=([^&]+)).*","gi").test(l)&&RegExp.$2}},391:function(n,l,t){var content=t(395);content.__esModule&&(content=content.default),"string"==typeof content&&(content=[[n.i,content,""]]),content.locals&&(n.exports=content.locals);(0,t(93).default)("bab3942c",content,!0,{sourceMap:!1})},392:function(n,l,t){var content=t(397);content.__esModule&&(content=content.default),"string"==typeof content&&(content=[[n.i,content,""]]),content.locals&&(n.exports=content.locals);(0,t(93).default)("f9a6a270",content,!0,{sourceMap:!1})},394:function(n,l,t){"use strict";t(391)},395:function(n,l,t){var r=t(92)((function(i){return i[1]}));r.push([n.i,".header-info[data-v-f2120f3a]{background:#a24545;box-sizing:border-box;height:70px;line-height:70px}.header-info__left[data-v-f2120f3a]{box-sizing:border-box;height:100%;margin:0 auto;min-width:1080px;width:70%}.header-info__left span[data-v-f2120f3a]{color:#f3dfdf;font-size:30px;font-weight:600}",""]),r.locals={},n.exports=r},396:function(n,l,t){"use strict";t(392)},397:function(n,l,t){var r=t(92)((function(i){return i[1]}));r.push([n.i,".menu-info[data-v-42e9d399]{box-sizing:border-box;display:inline-block;padding-top:15px;width:350px}.menu-info__content[data-v-42e9d399]{height:calc(100vh - 75px);overflow-y:auto;padding:0 10px}.menu-info__content-item[data-v-42e9d399]{color:rgba(28,27,27,.8);cursor:pointer;font-family:\"-apple-system,BlinkMacSystemFont,'Helvetica Neue',Helvetica,Segoe UI,Arial,Roboto,'PingFang SC',miui,'Hiragino Sans GB','Microsoft Yahei',sans-serif\";font-size:16px;padding:8px 0}.is-active-menu[data-v-42e9d399]{color:red}.menu-info__content-item[data-v-42e9d399]:hover{color:#3f0fea}.is-class[data-v-42e9d399]{color:rgba(28,27,27,.9);font-size:24px;font-weight:600}",""]),r.locals={},n.exports=r},399:function(n,l,t){var content=t(429);content.__esModule&&(content=content.default),"string"==typeof content&&(content=[[n.i,content,""]]),content.locals&&(n.exports=content.locals);(0,t(93).default)("528d717c",content,!0,{sourceMap:!1})},403:function(n,l,t){"use strict";t.r(l);var r={name:"index"},e=(t(394),t(56)),component=Object(e.a)(r,(function(){this._self._c;return this._m(0)}),[function(){var n=this._self._c;return n("div",{staticClass:"header-info"},[n("div",{staticClass:"header-info__left"},[n("span",[this._v("SharedJS")])])])}],!1,null,"f2120f3a",null);l.default=component.exports},404:function(n,l,t){"use strict";t.r(l);t(50),t(31),t(74);var r=t(390),e={name:"index",data:function(){return{current:"sharedActionSheetData",menuList:[{name:"业务接口",attribute:"class"},{name:"sharedAxiosRequest",chinese:"接口请求简化封装"},{name:"sharedBarLineData",chinese:"bar-line-chart 对接"},{name:"sharedMultiPieData",chinese:"multi-pie-chart 对接"},{name:"sharedScheduleBarData",chinese:"schedule-bar-chart对接"},{name:"sharedActionSheetData",chinese:"vant下拉"},{name:"字符串",attribute:"class"},{name:"sharedGetHttpString",chinese:"获取http字符"},{name:"sharedKeepDecimal",chinese:"四舍五入"},{name:"sharedSpecialVal",chinese:"特殊值返回"},{name:"sharedFormatNumber",chinese:"大数值换单位"},{name:"sharedSuppleMonth",chinese:"数据补月"},{name:"数组",attribute:"class"},{name:"sharedArrayOperate",chinese:"修改属性名"},{name:"sharedDeepCopy",chinese:"深拷贝"},{name:"sharedShallowCopy",chinese:"浅拷贝"},{name:"sharedArrayUnique",chinese:"数组去重"},{name:"sharedArraySort",chinese:"数组排序"},{name:"sharedArrayInterBy",chinese:"数组交集"},{name:"sharedArrayUnionBy",chinese:"数组并集"},{name:"sharedArrayDiffBy",chinese:"数组差集"},{name:"性能",attribute:"class"},{name:"sharedAntiShake",chinese:"防抖"},{name:"sharedThrottle",chinese:"节流"}]}},methods:{handleClickGoMD:function(n){var l=window.location.href;window.location.href=l.replace(/(\?|&)title=[^&]+/,"?title=".concat(n.name)),this.current=n.name,this.$emit("get-markdown-data",n)},goRouter:function(){var n=Object(r.a)("title");n&&(this.current=n)}},mounted:function(){this.goRouter()}},c=(t(396),t(56)),component=Object(c.a)(e,(function(){var n=this,l=n._self._c;return l("div",{staticClass:"menu-info"},[l("ul",{staticClass:"menu-info__content"},n._l(n.menuList,(function(t,r){return l("li",{key:r,staticClass:"menu-info__content-item",class:{"is-class":"class"===t.attribute,"is-active-menu":n.current===t.name},on:{click:function(l){!t.attribute&&n.handleClickGoMD(t)}}},[l("span",{staticStyle:{"font-weight":"600"}},[n._v(" "+n._s(t.name))]),n._v(" "),l("br"),n._v(" "),l("span",{staticStyle:{"font-size":"14px"}},[n._v(n._s(t.chinese))])])})),0)])}),[],!1,null,"42e9d399",null);l.default=component.exports},405:function(n,l,t){var content=t(406);content.__esModule&&(content=content.default),"string"==typeof content&&(content=[[n.i,content,""]]),content.locals&&(n.exports=content.locals);(0,t(93).default)("4352518d",content,!0,{sourceMap:!1})},406:function(n,l,t){var r=t(92)((function(i){return i[1]}));r.push([n.i,'/*!\n  Theme: GitHub\n  Description: Light theme as seen on github.com\n  Author: github.com\n  Maintainer: @Hirse\n  Updated: 2021-05-15\n\n  Outdated base version: https://github.com/primer/github-syntax-light\n  Current colors taken from GitHub\'s CSS\n*/.hljs{background:#fff;color:#24292e}.hljs-doctag,.hljs-keyword,.hljs-meta .hljs-keyword,.hljs-template-tag,.hljs-template-variable,.hljs-type,.hljs-variable.language_{color:#d73a49}.hljs-title,.hljs-title.class_,.hljs-title.class_.inherited__,.hljs-title.function_{color:#6f42c1}.hljs-attr,.hljs-attribute,.hljs-literal,.hljs-meta,.hljs-number,.hljs-operator,.hljs-selector-attr,.hljs-selector-class,.hljs-selector-id,.hljs-variable{color:#005cc5}.hljs-meta .hljs-string,.hljs-regexp,.hljs-string{color:#032f62}.hljs-built_in,.hljs-symbol{color:#e36209}.hljs-code,.hljs-comment,.hljs-formula{color:#6a737d}.hljs-name,.hljs-quote,.hljs-selector-pseudo,.hljs-selector-tag{color:#22863a}.hljs-subst{color:#24292e}.hljs-section{color:#005cc5;font-weight:700}.hljs-bullet{color:#735c0f}.hljs-emphasis{color:#24292e;font-style:italic}.hljs-strong{color:#24292e;font-weight:700}.hljs-addition{background-color:#f0fff4;color:#22863a}.hljs-deletion{background-color:#ffeef0;color:#b31d28}::-webkit-scrollbar{background-color:#e9ecef;height:6px;width:4px}::-webkit-scrollbar-thumb{background-color:#a24545;border-radius:10px}::-webkit-scrollbar-track{background-color:transparent}h1{font-size:32px}.container-content__markdown h1,.container-content__markdown h2,.container-content__markdown h3,.container-content__markdown h4,.container-content__markdown h5{color:#323233}.container-content__markdown p{color:rgba(28,27,27,.8);padding:3px 0}.container-content__markdown li{color:rgba(28,27,27,.8);padding:5px 10px}.container-content__markdown ul li{padding-left:20px}.container-content__markdown h2{margin-top:35px}pre{background:#f5e8e8;border:1px solid #efcaca;border-radius:5px;font-family:"SFMono-Regular",Consolas,"Liberation Mono",Menlo,Courier,monospace;padding:20px}pre code.hljs{display:block;overflow-x:auto;padding:1em}code.hljs{padding:3px 5px}code{font-family:inherit;font-size:16px}h1,h2,h3,h4{border-bottom-left-radius:2px;border-left:6px solid #c4223f;border-top-left-radius:2px;box-shadow:0 .0425rem .2875rem #c4c0c0;padding:20px}',""]),r.locals={},n.exports=r},407:function(n,l,t){var map={"./sharedActionSheetData.md":408,"./sharedAntiShake.md":409,"./sharedArrayDiffBy.md":410,"./sharedArrayInterBy.md":411,"./sharedArrayOperate.md":412,"./sharedArraySort.md":413,"./sharedArrayUnionBy.md":414,"./sharedArrayUnique.md":415,"./sharedAxiosRequest.md":416,"./sharedBarLineData.md":417,"./sharedDeepCopy.md":418,"./sharedFormatNumber.md":419,"./sharedGetHttpString.md":420,"./sharedKeepDecimal.md":421,"./sharedMultiPieData.md":422,"./sharedScheduleBarData.md":423,"./sharedShallowCopy.md":424,"./sharedSpecialVal.md":425,"./sharedSuppleMonth.md":426,"./sharedThrottle.md":427};function r(n){var l=e(n);return t(l)}function e(n){if(!t.o(map,n)){var l=new Error("Cannot find module '"+n+"'");throw l.code="MODULE_NOT_FOUND",l}return map[n]}r.keys=function(){return Object.keys(map)},r.resolve=e,n.exports=r,r.id=407},408:function(n,l,t){"use strict";t.r(l),l.default='<section><h1>sharedActionSheetData(Object)</h1>\n<p>对 Vant ActionSheet 组件进行接口请求和数据处理封装，一键式得到业务中的数据格式。目前仅支持单列数据业务（“年” 或者 “月”）</p>\n<h2>参数（Object）</h2>\n<ol>\n<li><strong>request</strong> (Object)：请求方法体，目前仅axios传入，可全局配置，配置后可不用传</li>\n<li><strong>url</strong> (String)： 接口服务地址</li>\n<li><strong>method</strong> (String)： 请求方式 “GET” 和 “POST”, 默认GET请求</li>\n<li><strong>param</strong> (Object)： 接口请求参数</li>\n<li><strong>query_key</strong> (String)：后端 query_key 值（业务特殊定制，其他公司或个人可不予理会）</li>\n<li><strong>configData</strong> (Object | Array)： 详细请参考 sharedArrayOperate</li>\n</ol>\n<h2>返回值（Object）</h2>\n<ol>\n<li><strong>newData</strong> (Object)：处理后的新数据，可直接用</li>\n<li><strong>rawData</strong> (Object)：原接口返回数据</li>\n</ol>\n<h2>引入</h2>\n<pre><code class="language-javascript"><span class="hljs-keyword">import</span> { sharedActionSheetData } <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;SharedJS&quot;</span>;\n</code></pre>\n<h2>例子</h2>\n<pre><code class="language-javascript">  <span class="hljs-keyword">const</span> configData = [\n  {\n    <span class="hljs-attr">label</span>: <span class="hljs-string">&quot;name&quot;</span>,\n    <span class="hljs-attr">value</span>: <span class="hljs-string">&#x27;ND&#x27;</span>,\n    <span class="hljs-attr">unit</span>: <span class="hljs-string">&#x27;年&#x27;</span>\n  }]\n\n<span class="hljs-keyword">const</span> data = <span class="hljs-keyword">await</span> sharedActionSheetData({\n  <span class="hljs-attr">request</span>: request,\n  <span class="hljs-attr">method</span>: <span class="hljs-string">&quot;GET&quot;</span>,\n  <span class="hljs-attr">query_key</span>: <span class="hljs-string">&#x27;yf-zrzy-zygl-tdgy-003&#x27;</span>,\n  configData\n})\n<span class="hljs-built_in">console</span>.log(data);\n</code></pre>\n<p>输出结果</p>\n<p><img src="/SharedJS/markdown/sharedActionSheetData-1.png" alt=""></p>\n<p>原接口请求数据</p>\n<p><img src="/SharedJS/markdown/sharedActionSheetData-2.png" alt=""></p>\n</section>\n'},409:function(n,l,t){"use strict";t.r(l),l.default='<section><h1>sharedAntiShake(fn, delay)</h1>\n<p>防抖是针对js中事件被连续触发导致连续执行函数所做的防范措施。 它可以延迟函数的执行，直到指定的时间段内没有进一步的函数调用发生。当有函数调用发生时，它将取消前一个调用并等待一段时间后再执行最后一个调用。 在这个过程中，函数只会执行一次，从而减少了代码的重复执行和资源的浪费。</p>\n<h2>参数</h2>\n<ul>\n<li>fn (Function)：回调</li>\n<li>delay (Number)： 时间</li>\n</ul>\n<h2>引入</h2>\n<pre><code class="language-javascript"><span class="hljs-keyword">import</span> { sharedAntiShake } <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;SharedJS&quot;</span>;\n</code></pre>\n<h2>例子</h2>\n<pre><code class="language-javascript"><span class="hljs-keyword">const</span> antiShake = sharedAntiShake(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>{\n  <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;antiShake&#x27;</span>);\n}, <span class="hljs-number">1000</span>);\n\nantiShake();\nantiShake();\nantiShake(); <span class="hljs-comment">// 只会触发一次输出</span>\n</code></pre>\n</section>\n'},410:function(n,l,t){"use strict";t.r(l),l.default='<section><h1>sharedArrayInterBy(arr1, arr2, key)</h1>\n<p>获取两个数组对象的差集，即 arr1 中有而 arr2 中没有的元素</p>\n<h2>参数</h2>\n<ol>\n<li><strong>arr1</strong> (Array) ：数据1</li>\n<li><strong>arr2</strong> (Array)： 数据2</li>\n<li><strong>key</strong> (String)： 数组对象情况，属性名</li>\n</ol>\n<h2>引入</h2>\n<pre><code class="language-javascript"><span class="hljs-keyword">import</span> { sharedArrayInterBy } <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;SharedJS&quot;</span>;\n</code></pre>\n<h2>例子</h2>\n<pre><code class="language-javascript"><span class="hljs-keyword">let</span> arr1 = [\n  { <span class="hljs-attr">id</span>: <span class="hljs-number">1</span>, <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;Alice&#x27;</span> },\n  { <span class="hljs-attr">id</span>: <span class="hljs-number">2</span>, <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;Bob&#x27;</span> },\n  { <span class="hljs-attr">id</span>: <span class="hljs-number">3</span>, <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;Charlie&#x27;</span> },\n  { <span class="hljs-attr">id</span>: <span class="hljs-number">4</span>, <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;David&#x27;</span> }\n];\n<span class="hljs-keyword">let</span> arr2 = [\n  { <span class="hljs-attr">id</span>: <span class="hljs-number">3</span>, <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;Charlie&#x27;</span> },\n  { <span class="hljs-attr">id</span>: <span class="hljs-number">4</span>, <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;David&#x27;</span> },\n  { <span class="hljs-attr">id</span>: <span class="hljs-number">5</span>, <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;Emily&#x27;</span> },\n  { <span class="hljs-attr">id</span>: <span class="hljs-number">6</span>, <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;Frank&#x27;</span> }\n];\n\n<span class="hljs-built_in">console</span>.log(sharedArrayDiffBy(arr1, arr2));\n<span class="hljs-comment">// 输出 [{id: 1, name: &#x27;Alice&#x27;}, {id: 2, name: &#x27;Bob&#x27;}]</span>\n\n<span class="hljs-built_in">console</span>.log(sharedArrayDiffBy(arr1, arr2, <span class="hljs-string">&#x27;id&#x27;</span>));\n<span class="hljs-comment">// 输出 [{id: 1, name: &#x27;Alice&#x27;}, {id: 2, name: &#x27;Bob&#x27;}]</span>\n</code></pre>\n</section>\n'},411:function(n,l,t){"use strict";t.r(l),l.default='<section><h1>sharedArrayInterBy(arr1, arr2, key)</h1>\n<p>获取两个数组对象的交集</p>\n<h2>参数</h2>\n<ol>\n<li><strong>arr1</strong> (Array) ：数据1</li>\n<li><strong>arr2</strong> (Array)： 数据2</li>\n<li><strong>key</strong> (String)： 数组对象情况，属性名</li>\n</ol>\n<h2>引入</h2>\n<pre><code class="language-javascript"><span class="hljs-keyword">import</span> { sharedArrayInterBy } <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;SharedJS&quot;</span>;\n</code></pre>\n<h2>例子</h2>\n<pre><code class="language-javascript"><span class="hljs-keyword">let</span> arr1 = [\n  { <span class="hljs-attr">id</span>: <span class="hljs-number">1</span>, <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;Alice&#x27;</span> },\n  { <span class="hljs-attr">id</span>: <span class="hljs-number">2</span>, <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;Bob&#x27;</span> },\n  { <span class="hljs-attr">id</span>: <span class="hljs-number">3</span>, <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;Charlie&#x27;</span> },\n  { <span class="hljs-attr">id</span>: <span class="hljs-number">4</span>, <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;David&#x27;</span> }\n];\n<span class="hljs-keyword">let</span> arr2 = [\n  { <span class="hljs-attr">id</span>: <span class="hljs-number">3</span>, <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;Charlie&#x27;</span> },\n  { <span class="hljs-attr">id</span>: <span class="hljs-number">4</span>, <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;David&#x27;</span> },\n  { <span class="hljs-attr">id</span>: <span class="hljs-number">5</span>, <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;Emily&#x27;</span> },\n  { <span class="hljs-attr">id</span>: <span class="hljs-number">6</span>, <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;Frank&#x27;</span> }\n];\n\n<span class="hljs-built_in">console</span>.log(sharedArrayInterBy(arr1, arr2));\n<span class="hljs-comment">// 输出 [{id: 3, name: &#x27;Charlie&#x27;}, {id: 4, name: &#x27;David&#x27;}]</span>\n\n<span class="hljs-built_in">console</span>.log(sharedArrayInterBy(arr1, arr2, <span class="hljs-string">&#x27;id&#x27;</span>));\n<span class="hljs-comment">// 输出 [{id: 3, name: &#x27;Charlie&#x27;}, {id: 4, name: &#x27;David&#x27;}]</span>\n</code></pre>\n</section>\n'},412:function(n,l,t){"use strict";t.r(l),l.default='<section><h1>sharedArrayOperate(Object)</h1>\n<p>对数组对象里属性修改，支持单个和多个</p>\n<h2>参数</h2>\n<ol>\n<li><strong>sourceData</strong> (Object)：</li>\n</ol>\n<ul>\n<li>● 源数据, 必须数组里面嵌套对象格式。例如：[ {xxx: 1},{xxx: 23} ]</li>\n</ul>\n<ol start="2">\n<li><strong>configData</strong> (Object | Array)</li>\n</ol>\n<ul>\n<li>● label：前端要生成属性名</li>\n<li>● value：接口数据源被改的属性名</li>\n<li>● unit： 单位</li>\n</ul>\n<h2>引入</h2>\n<pre><code class="language-javascript"><span class="hljs-keyword">import</span> {sharedArrayOperate} form <span class="hljs-string">&quot;sharedjs&quot;</span>;\n</code></pre>\n<h2>例子</h2>\n<pre><code class="language-javascript"><span class="hljs-comment">// 源数据</span>\n <span class="hljs-keyword">const</span> sourceData = [\n  {<span class="hljs-string">&quot;ZKZ&quot;</span>: <span class="hljs-string">&quot;这是一个标题&quot;</span>, <span class="hljs-string">&quot;KQMJ&quot;</span>: <span class="hljs-number">14</span>, <span class="hljs-string">&quot;ND&quot;</span>: <span class="hljs-number">2021</span>},\n  {<span class="hljs-string">&quot;ZKZ&quot;</span>: <span class="hljs-string">&quot;这是一个标题&quot;</span>, <span class="hljs-string">&quot;KQMJ&quot;</span>: <span class="hljs-number">13</span>, <span class="hljs-string">&quot;ND&quot;</span>: <span class="hljs-number">2022</span>},\n  {<span class="hljs-string">&quot;ZKZ&quot;</span>: <span class="hljs-string">&quot;这是一个标题&quot;</span>, <span class="hljs-string">&quot;KQMJ&quot;</span>: <span class="hljs-number">12</span>, <span class="hljs-string">&quot;ND&quot;</span>: <span class="hljs-number">2023</span>},\n]\n\n<span class="hljs-comment">// 配置目标</span>\n<span class="hljs-keyword">const</span> configData = [\n  {\n    <span class="hljs-attr">label</span>: <span class="hljs-string">&quot;title&quot;</span>,\n    <span class="hljs-attr">value</span>: <span class="hljs-string">&#x27;ZKZ&#x27;</span>\n  },\n  {\n    <span class="hljs-attr">label</span>: <span class="hljs-string">&quot;name&quot;</span>,\n    <span class="hljs-attr">value</span>: <span class="hljs-string">&#x27;ND&#x27;</span>,\n    <span class="hljs-attr">unit</span>: <span class="hljs-string">&#x27;年&#x27;</span>\n  }]\n\n<span class="hljs-keyword">const</span> data = sharedArrayOperate({sourceData, configData})\n\n<span class="hljs-built_in">console</span>.log(data);\n\n<span class="hljs-comment">// 输出结果如下</span>\n\n[\n  {<span class="hljs-string">&quot;title&quot;</span>:<span class="hljs-string">&quot;这是一个标题&quot;</span>,<span class="hljs-string">&quot;name&quot;</span>:<span class="hljs-string">&quot;2021年&quot;</span>},\n  {<span class="hljs-string">&quot;title&quot;</span>:<span class="hljs-string">&quot;这是一个标题&quot;</span>,<span class="hljs-string">&quot;name&quot;</span>:<span class="hljs-string">&quot;2022年&quot;</span>},\n  {<span class="hljs-string">&quot;title&quot;</span>:<span class="hljs-string">&quot;这是一个标题&quot;</span>,<span class="hljs-string">&quot;name&quot;</span>:<span class="hljs-string">&quot;2023年&quot;</span>}\n]\n</code></pre>\n<p><img src="/SharedJS/markdown/sharedArrayOperate-1.png" alt=""></p>\n</section>\n'},413:function(n,l,t){"use strict";t.r(l),l.default='<section><h1>sharedArraySort(data, key)</h1>\n<p>数组排序</p>\n<h2>参数</h2>\n<ol>\n<li><strong>data</strong> (Array) ：数据</li>\n<li><strong>key</strong> (Function)： 数组对象情况，属性名</li>\n<li><strong>order</strong> (String)： asc -- 升序, desc -- 降序</li>\n</ol>\n<h2>引入</h2>\n<pre><code class="language-javascript"><span class="hljs-keyword">import</span> { sharedArraySort } <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;SharedJS&quot;</span>;\n</code></pre>\n<h2>普通数组</h2>\n<pre><code class="language-javascript"><span class="hljs-keyword">let</span> arr1 = [<span class="hljs-number">3</span>, <span class="hljs-number">1</span>, <span class="hljs-number">4</span>, <span class="hljs-number">2</span>, <span class="hljs-number">5</span>];\n\n<span class="hljs-built_in">console</span>.log(sharedArraySort(arr1));\n\n<span class="hljs-comment">// 输出 [1, 2, 3, 4, 5]</span>\n\n<span class="hljs-built_in">console</span>.log(sharedArraySort(arr1, <span class="hljs-literal">null</span>, <span class="hljs-string">&#x27;desc&#x27;</span>)); \n\n<span class="hljs-comment">// 输出 [5, 4, 3, 2, 1]</span>\n</code></pre>\n<h2>数组对象排序</h2>\n<pre><code class="language-javascript"><span class="hljs-keyword">let</span> arr2 = [\n  { <span class="hljs-attr">id</span>: <span class="hljs-number">3</span>, <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;Charlie&#x27;</span> },\n  { <span class="hljs-attr">id</span>: <span class="hljs-number">1</span>, <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;Alice&#x27;</span> },\n  { <span class="hljs-attr">id</span>: <span class="hljs-number">4</span>, <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;David&#x27;</span> },\n  { <span class="hljs-attr">id</span>: <span class="hljs-number">2</span>, <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;Bob&#x27;</span> }\n];\n\n<span class="hljs-built_in">console</span>.log(sharedArraySort(arr2, <span class="hljs-string">&#x27;id&#x27;</span>)); \n\n<span class="hljs-comment">// 输出 [{id: 1, name: &#x27;Alice&#x27;}, {id: 2, name: &#x27;Bob&#x27;}, {id: 3, name: &#x27;Charlie&#x27;}, {id: 4, name: &#x27;David&#x27;}</span>\n\n<span class="hljs-built_in">console</span>.log(sharedArraySort(arr2, <span class="hljs-string">&#x27;name&#x27;</span>, <span class="hljs-string">&#x27;desc&#x27;</span>));\n\n<span class="hljs-comment">// 输出 [{id: 3, name: &#x27;Charlie&#x27;}, {id: 2, name: &#x27;Bob&#x27;}, {id: 1, name: &#x27;Alice&#x27;}, {id: 4, name: &#x27;David&#x27;}]</span>\n</code></pre>\n</section>\n'},414:function(n,l,t){"use strict";t.r(l),l.default='<section><h1>sharedArrayUnionBy(arr1, arr2, key)</h1>\n<p>获取两个数组对象的并集</p>\n<h2>参数</h2>\n<ol>\n<li><strong>arr1</strong> (Array) ：数据1</li>\n<li><strong>arr2</strong> (Array)： 数据2</li>\n<li><strong>key</strong> (String)： 数组对象情况，属性名</li>\n</ol>\n<h2>引入</h2>\n<pre><code class="language-javascript"><span class="hljs-keyword">import</span> { sharedArrayUnionBy } <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;SharedJS&quot;</span>;\n</code></pre>\n<h2>例子</h2>\n<pre><code class="language-javascript"><span class="hljs-keyword">let</span> arr1 = [\n  { <span class="hljs-attr">id</span>: <span class="hljs-number">1</span>, <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;Alice&#x27;</span> },\n  { <span class="hljs-attr">id</span>: <span class="hljs-number">2</span>, <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;Bob&#x27;</span> },\n  { <span class="hljs-attr">id</span>: <span class="hljs-number">3</span>, <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;Charlie&#x27;</span> },\n  { <span class="hljs-attr">id</span>: <span class="hljs-number">4</span>, <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;David&#x27;</span> }\n];\n<span class="hljs-keyword">let</span> arr2 = [\n  { <span class="hljs-attr">id</span>: <span class="hljs-number">3</span>, <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;Charlie&#x27;</span> },\n  { <span class="hljs-attr">id</span>: <span class="hljs-number">4</span>, <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;David&#x27;</span> },\n  { <span class="hljs-attr">id</span>: <span class="hljs-number">5</span>, <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;Emily&#x27;</span> },\n  { <span class="hljs-attr">id</span>: <span class="hljs-number">6</span>, <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;Frank&#x27;</span> }\n];\n\n<span class="hljs-built_in">console</span>.log(sharedArrayUnionBy(arr1, arr2));\n\n<span class="hljs-comment">// 输出 </span>\n<span class="hljs-comment">//  [</span>\n<span class="hljs-comment">//    {id: 1, name: &#x27;Alice&#x27;},</span>\n<span class="hljs-comment">//    {id: 2, name: &#x27;Bob&#x27;},</span>\n<span class="hljs-comment">//    {id: 3, name: &#x27;Charlie&#x27;},</span>\n<span class="hljs-comment">//    {id: 4, name: &#x27;David&#x27;},</span>\n<span class="hljs-comment">//    {id: 5, name: &#x27;Emily&#x27;}, </span>\n<span class="hljs-comment">//    {id: 6, name: &#x27;Frank&#x27;}</span>\n<span class="hljs-comment">//  ]</span>\n\n<span class="hljs-built_in">console</span>.log(sharedArrayUnionBy(arr1, arr2, <span class="hljs-string">&#x27;id&#x27;</span>));\n \n<span class="hljs-comment">// 输出 [1, 2, 3, 4, 5, 6]</span>\n</code></pre>\n</section>\n'},415:function(n,l,t){"use strict";t.r(l),l.default='<section><h1>sharedArrayUnique(data, key)</h1>\n<p>数组去重</p>\n<h2>参数</h2>\n<ol>\n<li><strong>data</strong> (Array) ：数据</li>\n<li><strong>key</strong> (Function)： 数组对象情况，属性名</li>\n</ol>\n<h2>引入</h2>\n<pre><code class="language-javascript"><span class="hljs-keyword">import</span> { sharedArrayUnique } <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;SharedJS&quot;</span>;\n</code></pre>\n<h2>普通数组</h2>\n<pre><code class="language-javascript"><span class="hljs-keyword">let</span> arr1 = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">5</span>];\n\n<span class="hljs-built_in">console</span>.log(sharedArrayUnique(arr1)); \n\n<span class="hljs-comment">// 输出 [1, 2, 3, 4, 5]</span>\n</code></pre>\n<h2>数组对象去重</h2>\n<pre><code class="language-javascript"><span class="hljs-keyword">let</span> arr2 = [\n  { <span class="hljs-attr">id</span>: <span class="hljs-number">1</span>, <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;Alice&#x27;</span> },\n  { <span class="hljs-attr">id</span>: <span class="hljs-number">2</span>, <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;Bob&#x27;</span> },\n  { <span class="hljs-attr">id</span>: <span class="hljs-number">1</span>, <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;Alice&#x27;</span> },\n  { <span class="hljs-attr">id</span>: <span class="hljs-number">3</span>, <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;Charlie&#x27;</span> }\n];\n<span class="hljs-built_in">console</span>.log(sharedArrayUnique(arr2, <span class="hljs-function"><span class="hljs-params">item</span> =&gt;</span> item.id)); \n\n<span class="hljs-comment">// 输出 [{id: 1, name: &#x27;Alice&#x27;}, {id: 2, name: &#x27;Bob&#x27;}, {id: 3, name: &#x27;Charlie&#x27;}]</span>\n\n<span class="hljs-built_in">console</span>.log(sharedArrayUnique(arr2, <span class="hljs-function"><span class="hljs-params">item</span> =&gt;</span> item.name));\n\n<span class="hljs-comment">// 输出 [{id: 1, name: &#x27;Alice&#x27;}, {id: 2, name: &#x27;Bob&#x27;}, {id: 3, name: &#x27;Charlie&#x27;}]</span>\n\n<span class="hljs-built_in">console</span>.log(sharedArrayUnique(arr2)); \n\n<span class="hljs-comment">// 输出 [{id: 1, name: &#x27;Alice&#x27;}, {id: 2, name: &#x27;Bob&#x27;}, {id: 1, name: &#x27;Alice&#x27;}, {id: 3, name: &#x27;Charlie&#x27;}]</span>\n</code></pre>\n</section>\n'},416:function(n,l,t){"use strict";t.r(l),l.default='<section><h1>sharedAxiosRequest(Object)</h1>\n<p>接口请求统一封装，返回一个promise对象</p>\n<h2>参数</h2>\n<ol>\n<li><strong>request</strong> (Object) ：传axios对象这种，使用时候项目一般默认全局配置，关于全局配置请继续往下看。</li>\n<li><strong>requestKey</strong> (String || Number)：有时候可配置多个request，指定使用第几个请求体，默认是使用（0 -- 第一个， 1 -- 第一个，依此类推...）</li>\n<li><strong>url</strong> (String)： 接口url地址</li>\n<li><strong>query_key</strong> (String)：后端 query_key 值（业务特殊定制，配合后端接口特性语法糖，正常使用url即可）</li>\n<li><strong>method</strong> (String)： 请求方式 “GET” 和 “POST”, 默认GET请求</li>\n<li><strong>param</strong> (Object)： 接口请求参数</li>\n</ol>\n<h2>全局配置</h2>\n<pre><code class="language-javascript"><span class="hljs-comment">// main.js  </span>\n<span class="hljs-comment">// 内部会自动读取 window.sharedRequest作为请求</span>\n\n<span class="hljs-comment">// 单个</span>\n<span class="hljs-keyword">import</span> axios <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;axios&quot;</span>;\n<span class="hljs-built_in">window</span>.sharedRequest = axios\n\n<span class="hljs-comment">//多个 </span>\n<span class="hljs-keyword">import</span> axios <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;axios&quot;</span>;\n<span class="hljs-keyword">import</span> axios2 <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;axios2&quot;</span>;\n<span class="hljs-built_in">window</span>.sharedRequest = [axios, axios2] <span class="hljs-comment">// 默认使用第一个</span>\n</code></pre>\n<h2>引入</h2>\n<pre><code class="language-javascript"><span class="hljs-keyword">import</span> { sharedAxiosRequest } <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;SharedJS&quot;</span>;\n</code></pre>\n<h2>例子 1</h2>\n<p>如果配置了全局axios 不需要再传request</p>\n<pre><code class="language-javascript"><span class="hljs-comment">// main.js 全局配置</span>\n<span class="hljs-keyword">import</span> axios <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;axios&quot;</span>;\n<span class="hljs-built_in">window</span>.sharedRequest = axios <span class="hljs-comment">// 默认使用第一个</span>\n\n<span class="hljs-comment">// 请求一个 query_key接口</span>\n<span class="hljs-keyword">let</span> data = <span class="hljs-keyword">await</span> sharedAxiosRequest({\n  <span class="hljs-attr">query_key</span>: <span class="hljs-string">&quot;yf-zrzy-zygl-tdgy-003&quot;</span>,\n  <span class="hljs-attr">param</span>: {\n    <span class="hljs-attr">xx</span>: <span class="hljs-number">1</span>,\n    <span class="hljs-attr">dd</span>: <span class="hljs-number">1</span>\n  },\n})\n\n<span class="hljs-built_in">console</span>.log(data);\n</code></pre>\n<h2>例子 2</h2>\n<p>如果request并未全局配置，必须每个都传，不太建议这么使用哦！</p>\n<pre><code class="language-javascript"><span class="hljs-comment">// main.js 全局配置</span>\n<span class="hljs-keyword">import</span> axios <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;axios&quot;</span>;\n<span class="hljs-built_in">window</span>.sharedRequest = axios <span class="hljs-comment">// 默认使用第一个</span>\n\n<span class="hljs-comment">// 请求一个 URL接口</span>\n<span class="hljs-keyword">let</span> data = <span class="hljs-keyword">await</span> sharedAxiosRequest({\n  <span class="hljs-attr">method</span>: <span class="hljs-string">&quot;POST&quot;</span>,\n  <span class="hljs-attr">url</span>: <span class="hljs-string">&quot;uia/login&quot;</span>,\n  <span class="hljs-attr">param</span>: {\n      <span class="hljs-attr">xx</span>: <span class="hljs-number">1</span>,\n      <span class="hljs-attr">dd</span>: <span class="hljs-number">1</span>\n  },\n})\n\n<span class="hljs-built_in">console</span>.log(data);\n</code></pre>\n<h2>例子 3</h2>\n<p>使用 requestKey配置请求体</p>\n<pre><code class="language-javascript"><span class="hljs-comment">// main.js 全局配置</span>\n<span class="hljs-keyword">import</span> axios <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;axios&quot;</span>;\n<span class="hljs-keyword">import</span> axios2 <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;axios2&quot;</span>;\n<span class="hljs-built_in">window</span>.sharedRequest = [axios, axios2] <span class="hljs-comment">// 默认使用第一个</span>\n\n<span class="hljs-comment">// 请求一个 URL接口</span>\n<span class="hljs-keyword">let</span> data = <span class="hljs-keyword">await</span> sharedAxiosRequest({\n  <span class="hljs-comment">// 配置axios2作为请求体 </span>\n  <span class="hljs-attr">requestKey</span>: <span class="hljs-number">1</span>,\n  <span class="hljs-attr">method</span>: <span class="hljs-string">&quot;POST&quot;</span>,\n  <span class="hljs-attr">url</span>: <span class="hljs-string">&quot;uia/login&quot;</span>,\n  <span class="hljs-attr">param</span>: {\n      <span class="hljs-attr">xx</span>: <span class="hljs-number">1</span>,\n      <span class="hljs-attr">dd</span>: <span class="hljs-number">1</span>\n  },\n})\n\n<span class="hljs-built_in">console</span>.log(data);\n</code></pre>\n</section>\n'},417:function(n,l,t){"use strict";t.r(l),l.default='<section><h1>sharedBarLineData(Object)</h1>\n<p><strong>对 ManyUI 组件库【bar-line-chart】柱线图组件接口统一处理。</strong></p>\n<p><img src="/SharedJS/markdown/sharedBarLineData1-2.png" alt=""></p>\n<p>注意！ 部分特殊数据结构情况无法满足，这个需要自己请求数据处理。</p>\n<h2>参数</h2>\n<ol>\n<li><strong>request</strong> (Object)：请求方法体，目前仅axios传入，可全局配置，配置后可不用传</li>\n<li><strong>url</strong> (String)： 接口服务地址</li>\n<li><strong>query_key</strong> (String)：后端 query_key 值。url 和 query_key只能传一种</li>\n<li><strong>method</strong> (String)： 请求方式 “GET” 和 “POST”, 默认GET请求</li>\n<li><strong>param</strong> (Object)： 接口请求参数</li>\n<li><strong>rowData</strong> (String)：x轴对应后端字段</li>\n<li><strong>xUnitCustom</strong> (String)：x轴数据添加文案，例如传 ”第xx季度“ 变成 ”第1季度“, ”xx“会被替换为后端返回的rowData变量</li>\n<li><strong>format</strong> (Array)： 后端对应字段：label = 文案, value = 数值; 例如{label: \'WDZ\', value: \'QY\'}</li>\n</ol>\n<h2>返回值（Object）</h2>\n<ol>\n<li><strong>data</strong> (Object)：后端接口原始数据</li>\n<li><strong>xData</strong> (Object)：组件 xData 数据</li>\n<li><strong>yData</strong> (Object)：组件 yData 数据</li>\n</ol>\n<h2>引入</h2>\n<pre><code class="language-javascript"><span class="hljs-keyword">import</span> { sharedBarLineData } <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;SharedJS&quot;</span>;\n</code></pre>\n<h2>使用案例</h2>\n<h3>1、柱状图折线图混合</h3>\n<p>注意！request 一般项目会全部配置，可不用传。</p>\n<p><img src="/SharedJS/markdown/sharedBarLineData1-3.png" alt=""></p>\n<pre><code class="language-html"> <span class="hljs-tag">&lt;<span class="hljs-name">bar-line-chart</span>\n      <span class="hljs-attr">height</span>=<span class="hljs-string">&quot;250px&quot;</span>\n      <span class="hljs-attr">y-unit</span>=<span class="hljs-string">&quot;单位：个&quot;</span>\n      <span class="hljs-attr">:yData</span>=<span class="hljs-string">&quot;yData&quot;</span>\n      <span class="hljs-attr">:xData</span>=<span class="hljs-string">&quot;xData&quot;</span>\n      <span class="hljs-attr">:barWidth</span>=<span class="hljs-string">&quot;16&quot;</span>\n      <span class="hljs-attr">barGapNum</span>=<span class="hljs-string">&quot;0&quot;</span>\n      <span class="hljs-attr">yLineColor</span>=<span class="hljs-string">&quot;transparent&quot;</span>\n      <span class="hljs-attr">xAxisLineColor</span>=<span class="hljs-string">&quot;rgba(255,255,255,0.2)&quot;</span>\n      <span class="hljs-attr">fontColor</span>=<span class="hljs-string">&quot;rgba(255,255,255,0.70)&quot;</span>\n&gt;</span>\n<span class="hljs-tag">&lt;/<span class="hljs-name">bar-line-chart</span>&gt;</span>\n</code></pre>\n<pre><code class="language-javascript">\n<span class="hljs-keyword">import</span> { sharedBarLineData } <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;SharedJS&quot;</span>;\n\n<span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> {\n  <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;bar-line-chart-abutment&quot;</span>,\n  <span class="hljs-function"><span class="hljs-title">data</span>(<span class="hljs-params"></span>)</span> {\n    <span class="hljs-keyword">return</span> {\n      <span class="hljs-attr">xData</span>: [],\n      <span class="hljs-attr">yData</span>: []\n    };\n  },\n\n  <span class="hljs-attr">methods</span>: {\n    <span class="hljs-keyword">async</span> <span class="hljs-function"><span class="hljs-title">getData</span>(<span class="hljs-params"></span>)</span>{\n      <span class="hljs-keyword">const</span> data =  <span class="hljs-keyword">await</span> sharedBarLineData({\n        <span class="hljs-attr">url</span>: <span class="hljs-string">&#x27;/demo-data/large-scree/bar-line-chart&#x27;</span>,\n        <span class="hljs-attr">method</span>: <span class="hljs-string">&#x27;GET&#x27;</span>,\n        <span class="hljs-attr">rowData</span>: <span class="hljs-string">&#x27;YD&#x27;</span>,\n        <span class="hljs-attr">xUnitCustom</span>: <span class="hljs-string">&#x27;xx月&#x27;</span>,\n        <span class="hljs-attr">format</span>: [\n          {\n            <span class="hljs-attr">label</span>: <span class="hljs-string">&#x27;分类1&#x27;</span>,\n            <span class="hljs-attr">value</span>: <span class="hljs-string">&#x27;JYJE&#x27;</span>,\n            <span class="hljs-attr">type</span>: <span class="hljs-string">&#x27;line&#x27;</span>,\n          },\n          {\n            <span class="hljs-attr">label</span>: <span class="hljs-string">&#x27;分类2&#x27;</span>,\n            <span class="hljs-attr">value</span>: <span class="hljs-string">&#x27;JYJE_TB&#x27;</span>,\n            <span class="hljs-attr">type</span>: <span class="hljs-string">&#x27;line&#x27;</span>,\n          },\n          {\n            <span class="hljs-attr">label</span>: <span class="hljs-string">&#x27;分类3&#x27;</span>,\n            <span class="hljs-attr">value</span>: <span class="hljs-string">&#x27;JYJE&#x27;</span>,\n            <span class="hljs-attr">type</span>: <span class="hljs-string">&#x27;bar&#x27;</span>,\n          },\n\n          {\n            <span class="hljs-attr">label</span>: <span class="hljs-string">&#x27;分类4&#x27;</span>,\n            <span class="hljs-attr">value</span>: <span class="hljs-string">&#x27;JYJJ_HB&#x27;</span>,\n            <span class="hljs-attr">type</span>: <span class="hljs-string">&#x27;bar&#x27;</span>,\n          }\n        ]\n      })\n\n      <span class="hljs-built_in">this</span>.yData = data.yData\n      <span class="hljs-built_in">this</span>.xData = data.xData\n    }\n  },\n\n  <span class="hljs-function"><span class="hljs-title">created</span>(<span class="hljs-params"></span>)</span>{\n    <span class="hljs-built_in">this</span>.getData()\n  },\n}\n</code></pre>\n<h3>2、带数字案例</h3>\n<p><img src="/SharedJS/markdown/sharedBarLineData1-4.png" alt=""></p>\n<pre><code class="language-html"><span class="hljs-tag">&lt;<span class="hljs-name">bar-line-chart</span> <span class="hljs-attr">vertical</span>\n                <span class="hljs-attr">:yData</span>=<span class="hljs-string">&quot;yData&quot;</span>\n                <span class="hljs-attr">:xData</span>=<span class="hljs-string">&quot;xData&quot;</span>\n                <span class="hljs-attr">y-unit</span>=<span class="hljs-string">&quot;单位：个&quot;</span>\n                <span class="hljs-attr">verticalGridTop</span>=<span class="hljs-string">&quot;30&quot;</span>\n                <span class="hljs-attr">xLineColor</span>=<span class="hljs-string">&quot;transparent&quot;</span>\n                <span class="hljs-attr">:yAxisLine</span>=<span class="hljs-string">&quot;{show: true, lineStyle: { color: &#x27;#E6E6E6&#x27;<span>}}</span>&quot;</span>\n                <span class="hljs-attr">barWidth</span>=<span class="hljs-string">&quot;14&quot;</span>\n&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">bar-line-chart</span>&gt;</span>\n</code></pre>\n<pre><code class="language-javascript"><span class="hljs-keyword">import</span> { sharedBarLineData } <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;SharedJS&quot;</span>;\n\n<span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> {\n  <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;bar-line-chart-abutment&quot;</span>,\n  <span class="hljs-function"><span class="hljs-title">data</span>(<span class="hljs-params"></span>)</span> {\n    <span class="hljs-keyword">return</span> {\n      <span class="hljs-attr">xData</span>: [],\n      <span class="hljs-attr">yData</span>: []\n    };\n  },\n\n  <span class="hljs-attr">methods</span>: {\n    <span class="hljs-keyword">async</span> <span class="hljs-function"><span class="hljs-title">getData</span>(<span class="hljs-params"></span>)</span>{\n      <span class="hljs-keyword">const</span> data =  <span class="hljs-keyword">await</span> sharedBarLineData({\n        <span class="hljs-attr">url</span>: <span class="hljs-string">&#x27;/demo-data/large-scree/bar-line-chart&#x27;</span>,\n        <span class="hljs-attr">method</span>: <span class="hljs-string">&#x27;GET&#x27;</span>,\n        <span class="hljs-attr">rowData</span>: <span class="hljs-string">&#x27;YD&#x27;</span>,\n        <span class="hljs-attr">xUnitCustom</span>: <span class="hljs-string">&#x27;xx月&#x27;</span>,\n        <span class="hljs-attr">format</span>: [\n          {\n            <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;分类1&#x27;</span>,\n            <span class="hljs-attr">value</span>: <span class="hljs-string">&#x27;JYJE&#x27;</span>,\n            <span class="hljs-attr">stack</span>: <span class="hljs-string">&#x27;total&#x27;</span>,\n            <span class="hljs-attr">type</span>: <span class="hljs-string">&#x27;bar&#x27;</span>,\n            <span class="hljs-attr">label</span>: {\n              <span class="hljs-attr">show</span>: <span class="hljs-literal">true</span>,\n              <span class="hljs-attr">position</span>: <span class="hljs-string">&#x27;insideRight&#x27;</span>,\n              <span class="hljs-attr">padding</span>: [<span class="hljs-number">2</span>, <span class="hljs-number">4</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>],\n            },\n          },\n          {\n            <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;分类2&#x27;</span>,\n            <span class="hljs-attr">value</span>: <span class="hljs-string">&#x27;JYJJ_HB&#x27;</span>,\n            <span class="hljs-attr">stack</span>: <span class="hljs-string">&#x27;total&#x27;</span>,\n            <span class="hljs-attr">type</span>: <span class="hljs-string">&#x27;bar&#x27;</span>,\n            <span class="hljs-attr">label</span>: {\n              <span class="hljs-attr">show</span>: <span class="hljs-literal">true</span>,\n              <span class="hljs-attr">position</span>: <span class="hljs-string">&#x27;insideRight&#x27;</span>,\n              <span class="hljs-attr">padding</span>: [<span class="hljs-number">2</span>, <span class="hljs-number">4</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>],\n            },\n          }\n        ]\n      })\n\n      <span class="hljs-built_in">this</span>.yData = data.yData\n      <span class="hljs-built_in">this</span>.xData = data.xData\n    }\n  },\n\n  <span class="hljs-function"><span class="hljs-title">created</span>(<span class="hljs-params"></span>)</span>{\n    <span class="hljs-built_in">this</span>.getData()\n  },\n}\n</code></pre>\n<p>后端接口数据展示，正常都是这种结构</p>\n<p><img src="/SharedJS/markdown/sharedBarLineData1-1.png" alt=""></p>\n</section>\n'},418:function(n,l,t){"use strict";t.r(l),l.default='<section><h1>sharedDeepCopy(data)</h1>\n<p>深拷贝是指创建一个新对象，新对象与原对象完全独立，互不影响。 一种常见的实现深拷贝的方式是使用递归来遍历原对象的所有属性，并将其复制到新对象中。这样可以确保所有嵌套的引用类型数据都被正确复制。</p>\n<h2>参数</h2>\n<ul>\n<li>data (Array|Object)：源数据</li>\n</ul>\n<h2>引入</h2>\n<pre><code class="language-javascript"><span class="hljs-keyword">import</span> { sharedDeepCopy } <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;SharedJS&quot;</span>;\n</code></pre>\n<h2>例子</h2>\n<pre><code class="language-javascript"><span class="hljs-keyword">let</span> object = {\n  <span class="hljs-string">&quot;name&quot;</span>: <span class="hljs-string">&#x27;张飞&#x27;</span>,\n  <span class="hljs-string">&quot;skill&quot;</span>: [<span class="hljs-string">&#x27;五虎上将&#x27;</span>, <span class="hljs-string">&#x27;力气大&#x27;</span>]\n}\n\n<span class="hljs-keyword">const</span> deepCopyCopyObject = sharedDeepCopy(object)\n\n<span class="hljs-built_in">console</span>.log(deepCopyCopyObject);\n\n<span class="hljs-comment">// 输出结果 { &quot;name&quot;: &#x27;张飞&#x27;, &quot;skill&quot;: [&#x27;五虎上将&#x27;, &#x27;力气大&#x27;]}</span>\n\ndeepCopyCopyObject.name = <span class="hljs-string">&quot;赵云&quot;</span>\n\ndeepCopyCopyObject.skill[<span class="hljs-number">1</span>] = <span class="hljs-string">&quot;会用长枪&quot;</span>\n\n<span class="hljs-built_in">console</span>.log(object);\n\n<span class="hljs-comment">// 输出结果 { &quot;name&quot;: &#x27;张飞&#x27;, &quot;skill&quot;: [&#x27;五虎上将&#x27;, &#x27;力气大&#x27;]}</span>\n<span class="hljs-comment">// 不会影响 object</span>\n</code></pre>\n</section>\n'},419:function(n,l,t){"use strict";t.r(l),l.default='<section><h1>sharedFormatNumber(data, places)</h1>\n<p>对数据比较大的做转换处理，例如： 100000 =&gt; 10万，1000000000 =&gt; 10亿, 默认保留两位小数</p>\n<h2>参数</h2>\n<ol>\n<li><strong>data</strong> (Number)：数据源</li>\n<li><strong>unit</strong> (String)： 特殊值返回标识符默认是“--”</li>\n</ol>\n<h2>引入</h2>\n<pre><code class="language-javascript"><span class="hljs-keyword">import</span> { sharedFormatNumber } <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;SharedJS&quot;</span>;\n</code></pre>\n<h2>例子</h2>\n<pre><code class="language-javascript">sharedFormatNumber(<span class="hljs-number">100000</span>)\n\n<span class="hljs-comment">// 输出结果 10万</span>\n\nsharedFormatNumber(<span class="hljs-number">1000000000</span>)\n\n<span class="hljs-comment">// 输出结果 10亿</span>\n\nsharedFormatNumber(<span class="hljs-number">1021345000</span>, <span class="hljs-number">1</span>)\n\n<span class="hljs-comment">// 输出结果 10.2亿</span>\n\nsharedFormatNumber(<span class="hljs-number">1021345000</span>, <span class="hljs-number">3</span>)\n\n<span class="hljs-comment">// 输出结果 10.213亿</span>\n\n</code></pre>\n</section>\n'},420:function(n,l,t){"use strict";t.r(l),l.default='<section><h1>sharedGetHttpString(Variable)</h1>\n<p>接口请求统一封装，返回一个promise对象</p>\n<h2>参数</h2>\n<ol>\n<li><strong>variable</strong> (String) ：http地址key值</li>\n</ol>\n<h2>引入</h2>\n<pre><code class="language-javascript"><span class="hljs-keyword">import</span> { sharedGetHttpString } <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;SharedJS&quot;</span>;\n</code></pre>\n<h2>例子</h2>\n<pre><code class="language-javascript"><span class="hljs-comment">// 例如当前网页地址为： http://localhost:3000/home?title=2023</span>\n\n<span class="hljs-keyword">const</span> title = sharedGetHttpString(<span class="hljs-string">&quot;title&quot;</span>)\n\n<span class="hljs-built_in">console</span>.log(title)\n\n<span class="hljs-comment">// 输出结果：2023</span>\n\n</code></pre>\n</section>\n'},421:function(n,l,t){"use strict";t.r(l),l.default='<section><h1>sharedKeepDecimal(value, places)</h1>\n<p>对接数据进行四舍五入</p>\n<h2>参数</h2>\n<ol>\n<li><strong>value</strong> (Number)：值</li>\n<li><strong>places</strong> (Number)： 小数位数</li>\n</ol>\n<h2>引入</h2>\n<pre><code class="language-javascript"><span class="hljs-keyword">import</span> { sharedKeepDecimal } form <span class="hljs-string">&quot;sharedjs&quot;</span>;\n</code></pre>\n<h2>例子</h2>\n<pre><code class="language-javascript">sharedKeepDecimal(<span class="hljs-string">&#x27;12.3666&#x27;</span>, <span class="hljs-number">1</span>)\n\n<span class="hljs-comment">// 输出结果 12.4</span>\n\nsharedKeepDecimal(<span class="hljs-string">&#x27;12.3666&#x27;</span>, <span class="hljs-number">2</span>)\n\n<span class="hljs-comment">// 输出结果 12.37</span>\n</code></pre>\n</section>\n'},422:function(n,l,t){"use strict";t.r(l),l.default='<section><h1>sharedMultiPieData(Object)</h1>\n<p><strong>对 ManyUI 组件库 【multi-pie-chart】饼图组件接口统一处理</strong></p>\n<p><img src="/SharedJS/markdown/sharedMultiPieData1-2.png" alt=""></p>\n<h2>参数</h2>\n<ol>\n<li><strong>request</strong> (Object)：请求方法体，目前仅axios传入，可全局配置，配置后可不用传</li>\n<li><strong>query_key</strong> (String)：后端 query_key 值。url 和 query_key只能传一种</li>\n<li><strong>url</strong> (String)： 接口服务地址</li>\n<li><strong>method</strong> (String)： 请求方式 “GET” 和 “POST”, 默认GET请求</li>\n<li><strong>param</strong> (Object)： 接口请求参数</li>\n<li><strong>format</strong> (Array)： 后端对应字段：label = 文案, value = 数值; 例如{label: \'WDZ\', value: \'QY\'}</li>\n</ol>\n<h2>返回值（Object）</h2>\n<ol>\n<li><strong>newData</strong> (Object)：处理后的新数据，可直接用</li>\n<li><strong>rawData</strong> (Object)：原接口返回数据</li>\n</ol>\n<h2>引入</h2>\n<pre><code class="language-javascript"><span class="hljs-keyword">import</span> { sharedMultiPieData } <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;SharedJS&quot;</span>;\n</code></pre>\n<h2>使用案例</h2>\n<h3>1、圆环图对接</h3>\n<p><img src="/SharedJS/markdown/sharedMultiPieData1-1.png" alt=""></p>\n<p>注意！其他饼图对接一样，这里不多重复介绍</p>\n<pre><code class="language-html"><span class="hljs-tag">&lt;<span class="hljs-name">multi-pie-chart</span>\n    <span class="hljs-attr">unit</span>=<span class="hljs-string">&quot;家&quot;</span>\n    <span class="hljs-attr">:data</span>=<span class="hljs-string">&quot;pieData&quot;</span>\n    <span class="hljs-attr">:radius</span>=<span class="hljs-string">&quot;[40, 70]&quot;</span>\n    <span class="hljs-attr">:outer-edge-line</span>=<span class="hljs-string">&quot;[&#x27;80&#x27;, &#x27;81&#x27;]&quot;</span>\n    <span class="hljs-attr">:islabelLine</span>=<span class="hljs-string">&quot;false&quot;</span>\n    <span class="hljs-attr">:height</span>=<span class="hljs-string">&quot;&#x27;280px&#x27;&quot;</span>\n    <span class="hljs-attr">legend-percent</span>\n    <span class="hljs-attr">:legendText</span>=<span class="hljs-string">&quot;{\n        labelFontSize: 14,\n        labelFontColor: &#x27;#ffffff&#x27;,\n        valueFontSize: 14,\n        valueFontColor: &#x27;#ffffff&#x27;,\n      }&quot;</span>\n&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">multi-pie-chart</span>&gt;</span>\n</code></pre>\n<pre><code class="language-javascript"><span class="hljs-keyword">import</span> { sharedMultiPieData } <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;SharedJS&quot;</span>;\n\n<span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> {\n  <span class="hljs-function"><span class="hljs-title">data</span>(<span class="hljs-params"></span>)</span> {\n    <span class="hljs-keyword">return</span> {\n      <span class="hljs-attr">pieData</span>: [],\n    };\n  },\n\n  <span class="hljs-attr">methods</span>: {\n    <span class="hljs-keyword">async</span> <span class="hljs-function"><span class="hljs-title">getData</span>(<span class="hljs-params"></span>)</span>{\n      <span class="hljs-keyword">const</span> data =  <span class="hljs-keyword">await</span> sharedMultiPieData({\n        <span class="hljs-attr">url</span>: <span class="hljs-string">&#x27;/demo-data/large-scree/multi-pie-chart&#x27;</span>,\n        <span class="hljs-attr">method</span>: <span class="hljs-string">&#x27;GET&#x27;</span>,\n        <span class="hljs-attr">format</span>: {\n          <span class="hljs-attr">label</span>: <span class="hljs-string">&#x27;SPFLX_MC&#x27;</span>,\n          <span class="hljs-attr">value</span>: <span class="hljs-string">&#x27;JYMJ&#x27;</span>,\n        }\n      })\n\n      <span class="hljs-built_in">this</span>.pieData = data.newData\n    }\n  },\n\n  <span class="hljs-function"><span class="hljs-title">created</span>(<span class="hljs-params"></span>)</span>{\n    <span class="hljs-built_in">this</span>.getData()\n  },\n}\n</code></pre>\n<p>后端接口返回数据</p>\n<p><img src="/SharedJS/markdown/sharedMultiPieData1-3.png" alt=""></p>\n</section>\n'},423:function(n,l,t){"use strict";t.r(l),l.default='<section><h1>sharedScheduleBarData(Object)</h1>\n<p><strong>对 ManyUI 组件库 【schedule-bar-chart】组件进行接口请求封装，返回目标数据</strong></p>\n<p><img src="/SharedJS/markdown/sharedScheduleBarData1-1.png" alt=""></p>\n<p>注意！暂时不支持复杂的树形的，这个需要你自己用sharedAxiosRequest方法去请求，处理数据</p>\n<h2>参数（Object）</h2>\n<ol>\n<li><strong>request</strong> (Object)：请求方法体，目前仅axios传入，可全局配置，配置后可不用传</li>\n<li><strong>url</strong> (String)： 接口服务地址</li>\n<li><strong>method</strong> (String)： 请求方式 “GET” 和 “POST”, 默认GET请求</li>\n<li><strong>param</strong> (Object)： 接口请求参数</li>\n<li><strong>query_key</strong> (String)：后端 query_key 值（业务特殊定制，其他公司或个人可不予理会）</li>\n<li><strong>configData</strong> (Object | Array)： 详细请参考 sharedArrayOperate</li>\n</ol>\n<h2>返回值（Object）</h2>\n<ol>\n<li><strong>newData</strong> (Object)：处理后的新数据，可直接用</li>\n<li><strong>rawData</strong> (Object)：原接口返回数据</li>\n</ol>\n<h2>引入</h2>\n<pre><code class="language-javascript"><span class="hljs-keyword">import</span> { sharedScheduleBarData } form <span class="hljs-string">&quot;sharedjs&quot;</span>;\n</code></pre>\n<h2>例子</h2>\n<p><img src="/SharedJS/markdown/sharedScheduleBarData1-2.png" alt=""></p>\n<pre><code class="language-html"><span class="hljs-tag">&lt;<span class="hljs-name">schedule-bar-chart</span>\n  <span class="hljs-attr">unit</span>=<span class="hljs-string">&quot;起&quot;</span>\n  <span class="hljs-attr">:data</span>=<span class="hljs-string">&quot;data&quot;</span>\n  <span class="hljs-attr">:total</span>=<span class="hljs-string">&quot;700&quot;</span>\n&gt;</span>\n<span class="hljs-tag">&lt;/<span class="hljs-name">schedule-bar-chart</span>&gt;</span>\n</code></pre>\n<pre><code class="language-javascript"><span class="hljs-keyword">import</span> { sharedScheduleBarData } <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;SharedJS&quot;</span>;\n\n<span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> {\n  <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;bar-line-chart-abutment&quot;</span>,\n  <span class="hljs-function"><span class="hljs-title">data</span>(<span class="hljs-params"></span>)</span> {\n    <span class="hljs-keyword">return</span> {\n      <span class="hljs-attr">data</span>: [],\n    };\n  },\n\n  <span class="hljs-attr">methods</span>: {\n    <span class="hljs-keyword">async</span> <span class="hljs-function"><span class="hljs-title">getData</span>(<span class="hljs-params"></span>)</span>{\n      <span class="hljs-keyword">const</span> data =  <span class="hljs-keyword">await</span> sharedScheduleBarData({\n        <span class="hljs-attr">url</span>: <span class="hljs-string">&#x27;/demo-data/large-scree/schedule-bar-chart&#x27;</span>,\n        <span class="hljs-attr">method</span>: <span class="hljs-string">&#x27;GET&#x27;</span>,\n        <span class="hljs-attr">configData</span>:[\n          {\n            <span class="hljs-comment">//组件数据结构的key</span>\n            <span class="hljs-attr">label</span>: <span class="hljs-string">&quot;name&quot;</span>,\n            <span class="hljs-comment">//接口对应字段</span>\n            <span class="hljs-attr">value</span>: <span class="hljs-string">&#x27;ND&#x27;</span>,\n            <span class="hljs-attr">unit</span>: <span class="hljs-string">&#x27;年&#x27;</span>\n          },\n          {\n            <span class="hljs-attr">label</span>: <span class="hljs-string">&quot;value&quot;</span>,\n            <span class="hljs-attr">value</span>: <span class="hljs-string">&#x27;JYJJ&#x27;</span>,\n            <span class="hljs-attr">unit</span>: <span class="hljs-number">0</span>\n          }]\n      })\n      <span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">JSON</span>.stringify(data.newData));\n      <span class="hljs-built_in">console</span>.log(data);\n\n      <span class="hljs-built_in">this</span>.data = data.newData\n\n    }\n  },\n\n  <span class="hljs-function"><span class="hljs-title">created</span>(<span class="hljs-params"></span>)</span>{\n    <span class="hljs-built_in">this</span>.getData()\n  }\n}\n</code></pre>\n<p>输出结果，和原来接口数据</p>\n<p><img src="/SharedJS/markdown/sharedScheduleBarData1-3.png" alt=""></p>\n</section>\n'},424:function(n,l,t){"use strict";t.r(l),l.default='<section><h1>sharedShallowCopy(fn, delay)</h1>\n<p>浅拷贝是指创建一个新对象，新对象与原对象共享引用类型的数据。当修改新对象中的引用类型数据时，原对象也会受到影响。<br>\n一种简单的实现浅拷贝的方式是使用 Object.assign 方法或展开运算符 ...。它们都可以将一个或多个对象的属性复制到目标对象中。</p>\n<h2>参数</h2>\n<ul>\n<li>data (Array|Object)：源数据</li>\n</ul>\n<h2>引入</h2>\n<pre><code class="language-javascript"><span class="hljs-keyword">import</span> { sharedShallowCopy } form <span class="hljs-string">&quot;sharedjs&quot;</span>;\n</code></pre>\n<h2>例子</h2>\n<pre><code class="language-javascript"><span class="hljs-keyword">let</span> object = {\n  <span class="hljs-string">&quot;name&quot;</span>: <span class="hljs-string">&#x27;张飞&#x27;</span>,\n  <span class="hljs-string">&quot;skill&quot;</span>: [<span class="hljs-string">&#x27;五虎上将&#x27;</span>, <span class="hljs-string">&#x27;力气大&#x27;</span>]\n}\n\n<span class="hljs-keyword">const</span> shallowCopyObject = sharedShallowCopy(object)\n\n<span class="hljs-built_in">console</span>.log(shallowCopyObject);\n\n<span class="hljs-comment">// 输出结果 { &quot;name&quot;: &#x27;张飞&#x27;, &quot;skill&quot;: [&#x27;五虎上将&#x27;, &#x27;力气大&#x27;]}</span>\n\nshallowCopyObject.name = <span class="hljs-string">&quot;赵云&quot;</span>\n\nshallowCopyObject.skill[<span class="hljs-number">1</span>] = <span class="hljs-string">&quot;会用长枪&quot;</span>\n\n<span class="hljs-built_in">console</span>.log(object);\n\n<span class="hljs-comment">// 输出结果 { &quot;name&quot;: &#x27;张飞&#x27;, &quot;skill&quot;: [&#x27;五虎上将&#x27;, &#x27;会用长枪&#x27;]} </span>\n\n<span class="hljs-comment">// object skill属性发生了变化</span>\n\n</code></pre>\n</section>\n'},425:function(n,l,t){"use strict";t.r(l),l.default='<section><h1>sharedSpecialVal(value, ident)</h1>\n<p>对特殊数据做格式转换</p>\n<h2>参数</h2>\n<ol>\n<li><strong>value</strong>（String）：值</li>\n<li><strong>ident</strong>（String）： 遇到特殊数据时候返回的统一标记，默认返回 “--”</li>\n</ol>\n<h2>引入</h2>\n<pre><code class="language-javascript"><span class="hljs-keyword">import</span> { sharedSpecialVal } form <span class="hljs-string">&quot;sharedjs&quot;</span>;\n</code></pre>\n<h2>例子</h2>\n<pre><code class="language-javascript">sharedSpecialVal(<span class="hljs-literal">null</span>) \n\n<span class="hljs-comment">// 输出结果 &quot;--&quot; </span>\n\nsharedSpecialVal(<span class="hljs-literal">undefined</span>)\n\n<span class="hljs-comment">// 输出结果 &quot;--&quot; </span>\n\nsharedSpecialVal(<span class="hljs-literal">NaN</span>)\n\n<span class="hljs-comment">// 输出结果 &quot;--&quot; </span>\n\nsharedSpecialVal(<span class="hljs-number">0</span>) \n\n<span class="hljs-comment">// 输出结果 0</span>\n\nsharedSpecialVal(<span class="hljs-literal">null</span>, <span class="hljs-string">&#x27;-&#x27;</span>)\n\n<span class="hljs-comment">// 输出结果 &quot;--&quot; </span>\n\nsharedSpecialVal(<span class="hljs-literal">undefined</span>, <span class="hljs-string">&#x27;-&#x27;</span>)\n\n<span class="hljs-comment">// 输出结果 &quot;--&quot; </span>\n</code></pre>\n</section>\n'},426:function(n,l,t){"use strict";t.r(l),l.default='<section><h1>sharedGetHttpString(Variable)</h1>\n<p>接口请求数据补月，后端一般只返回有数据月份，柱状图一般要展示1-12月</p>\n<h2>参数</h2>\n<ol>\n<li><strong>data</strong> (Array) ：数据</li>\n<li><strong>key</strong> (String) ：数组要补月份字段</li>\n</ol>\n<h2>引入</h2>\n<pre><code class="language-javascript"><span class="hljs-keyword">import</span> {sharedSuppleMonth} <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;SharedJS&quot;</span>;\n</code></pre>\n<h2>例子</h2>\n<pre><code class="language-javascript"> <span class="hljs-keyword">const</span> data = [\n  {<span class="hljs-string">&quot;YD&quot;</span>: <span class="hljs-number">4</span>, <span class="hljs-string">&quot;LINGSQY&quot;</span>: <span class="hljs-number">211</span>},\n  {<span class="hljs-string">&quot;YD&quot;</span>: <span class="hljs-number">5</span>, <span class="hljs-string">&quot;LINGSQY&quot;</span>: <span class="hljs-number">231</span>},\n  {<span class="hljs-string">&quot;YD&quot;</span>: <span class="hljs-number">6</span>, <span class="hljs-string">&quot;LINGSQY&quot;</span>: <span class="hljs-number">271</span>}\n]\n\n<span class="hljs-keyword">const</span> newData = sharedSuppleMonth(data, <span class="hljs-string">&#x27;YD&#x27;</span>)\n\n<span class="hljs-built_in">console</span>.log(newData)\n  \n<span class="hljs-comment">// 输出结果</span>\n  \n[\n  {<span class="hljs-string">&quot;YD&quot;</span>: <span class="hljs-number">1</span>},\n  {<span class="hljs-string">&quot;YD&quot;</span>: <span class="hljs-number">2</span>},\n  {<span class="hljs-string">&quot;YD&quot;</span>: <span class="hljs-number">3</span>},\n  {<span class="hljs-string">&quot;YD&quot;</span>: <span class="hljs-number">4</span>, <span class="hljs-string">&quot;LINGSQY&quot;</span>: <span class="hljs-number">211</span>},\n  {<span class="hljs-string">&quot;YD&quot;</span>: <span class="hljs-number">5</span>, <span class="hljs-string">&quot;LINGSQY&quot;</span>: <span class="hljs-number">231</span>},\n  {<span class="hljs-string">&quot;YD&quot;</span>: <span class="hljs-number">6</span>, <span class="hljs-string">&quot;LINGSQY&quot;</span>: <span class="hljs-number">271</span>},\n  {<span class="hljs-string">&quot;YD&quot;</span>: <span class="hljs-number">7</span>},\n  {<span class="hljs-string">&quot;YD&quot;</span>: <span class="hljs-number">8</span>},\n  {<span class="hljs-string">&quot;YD&quot;</span>: <span class="hljs-number">9</span>},\n  {<span class="hljs-string">&quot;YD&quot;</span>: <span class="hljs-number">10</span>},\n  {<span class="hljs-string">&quot;YD&quot;</span>: <span class="hljs-number">11</span>},\n  {<span class="hljs-string">&quot;YD&quot;</span>: <span class="hljs-number">12</span>}\n]\n</code></pre>\n</section>\n'},427:function(n,l,t){"use strict";t.r(l),l.default='<section><h1>sharedThrottle(fn, delay)</h1>\n<p>节流是指在一段时间内只执行一次回调函数，如果在该时间段内多次触发该事件，则只有第一次触发会执行回调函数。这样可以避免事件的高频触发，减少回调函数的执行次数，从而提高性能。</p>\n<h2>参数</h2>\n<ul>\n<li>fn (function)：回调</li>\n<li>delay (Number)： 时间</li>\n</ul>\n<h2>引入</h2>\n<pre><code class="language-javascript"><span class="hljs-keyword">import</span> { sharedAntiShake } form <span class="hljs-string">&quot;sharedjs&quot;</span>;\n</code></pre>\n<h2>例子</h2>\n<pre><code class="language-javascript"><span class="hljs-comment">// 节流函数使用方法</span>\n<span class="hljs-keyword">const</span> throttle = sharedThrottle(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>{\n  <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;throttle&#x27;</span>);\n}, <span class="hljs-number">1000</span>);\n\nthrottleFn();\nthrottleFn();\nthrottleFn(); <span class="hljs-comment">// 每隔1秒输出一次</span>\n</code></pre>\n</section>\n'},428:function(n,l,t){"use strict";t(399)},429:function(n,l,t){var r=t(92)((function(i){return i[1]}));r.push([n.i,".container{display:flex;flex-direction:column;height:100vh;overflow:hidden}.container-content{display:flex;height:800px;margin-left:15%;min-width:1080px}.container-content__markdown{height:calc(100vh - 70px);margin-left:20px;overflow-y:scroll;padding-left:20px;padding-right:15%;width:100%}",""]),r.locals={},n.exports=r},469:function(n,l,t){"use strict";t.r(l);t(50),t(405);var r=t(390),e={name:"IndexPage",data:function(){return{title:"sharedAxiosRequest",content:"# title ",markdownOption:{bold:!0,italic:!0,header:!0,underline:!0,strikethrough:!0,mark:!0,superscript:!0,subscript:!0,quote:!0,ol:!0,ul:!0,link:!0,imagelink:!0,code:!0,table:!0,fullscreen:!0,readmodel:!0,htmlcode:!0,help:!0,undo:!0,redo:!0,trash:!0,save:!0,navigation:!0,alignleft:!0,aligncenter:!0,alignright:!0,subfield:!1,preview:!0}}},computed:{markDownText:function(){return t(407)("./".concat(this.title,".md")).default}},methods:{getMarkdowndata:function(n){var l=n.name;this.title=l},goRouter:function(){var n=Object(r.a)("title");n&&(this.title=n)}},mounted:function(){this.goRouter()}},c=(t(428),t(56)),component=Object(c.a)(e,(function(){var n=this,l=n._self._c;return l("div",{staticClass:"container"},[l("header-info"),n._v(" "),l("div",{staticClass:"container-content"},[l("menu-info",{staticClass:"container-content__menu",on:{"get-markdown-data":n.getMarkdowndata}}),n._v(" "),l("div",{staticClass:"container-content__markdown",domProps:{innerHTML:n._s(n.markDownText)}})],1)],1)}),[],!1,null,null,null);l.default=component.exports;installComponents(component,{HeaderInfo:t(403).default,MenuInfo:t(404).default})}}]);